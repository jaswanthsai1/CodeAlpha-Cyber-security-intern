import socket
import struct
import textwrap

# Unpack Ethernet frame
def ethernet_frame(data):
    dest_mac, src_mac, proto = struct.unpack('! 6s 6s H', data[:14])
    return get_mac_addr(dest_mac), get_mac_addr(src_mac), socket.htons(proto), data[14:]

# Return properly formatted MAC address
def get_mac_addr(bytes_addr):
    return ':'.join(format(b, '02x') for b in bytes_addr).upper()

# Unpack IPv4 packet
def ipv4_packet(data):
    version_header_length = data[0]
    version = version_header_length >> 4
    ihl = (version_header_length & 15) * 4
    ttl, proto, src, target = struct.unpack('! 8x B B 2x 4s 4s', data[:20])
    return version, ihl, ttl, proto, ipv4(src), ipv4(target), data[ihl:]

# Returns properly formatted IPv4 address
def ipv4(addr):
    return '.'.join(map(str, addr))

# Unpack TCP segment
def tcp_segment(data):
    (src_port, dest_port, sequence, acknowledgement, offset_reserved_flags) = struct.unpack('! H H L L H', data[:14])
    offset = (offset_reserved_flags >> 12) * 4
    flag_urg = (offset_reserved_flags & 32) >> 5
    flag_ack = (offset_reserved_flags & 16) >> 4
    flag_psh = (offset_reserved_flags & 8) >> 3
    flag_rst = (offset_reserved_flags & 4) >> 2
    flag_syn = (offset_reserved_flags & 2) >> 1
    flag_fin = offset_reserved_flags & 1
    return src_port, dest_port, sequence, acknowledgement, flag_urg, flag_ack, flag_psh, flag_rst, flag_syn, flag_fin, data[offset:]

# Unpack UDP segment
def udp_segment(data):
    src_port, dest_port, size = struct.unpack('! H H 2x H', data[:8])
    return src_port, dest_port, size, data[8:]

# Format multi-line data
def format_multi_line(prefix, string, size=80):
    size = size - len(prefix)
    if isinstance(string, bytes):
        string = ''.join(r'\x{:02x}'.format(byte) for byte in string)
        if size % 2:
            size -= 1
    return '\n'.join([prefix + line for line in textwrap.wrap(string, size)])

def main():
    # create a raw socket and bind it to the public interface
    conn = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(3))

    print("Starting network sniffer... Press Ctrl+C to stop.")
    try:
        while True:
            raw_data, addr = conn.recvfrom(65535)
            dest_mac, src_mac, eth_proto, data = ethernet_frame(raw_data)
            print('\nEthernet Frame:')
            print(f'  Destination: {dest_mac}, Source: {src_mac}, Protocol: {eth_proto}')

            # IPv4
            if eth_proto == 8:
                (version, header_length, ttl, proto, src, target, data) = ipv4_packet(data)
                print('IPv4 Packet:')
                print(f'  Version: {version}, Header Length: {header_length}, TTL: {ttl}')
                print(f'  Protocol: {proto}, Source: {src}, Target: {target}')

                # ICMP
                if proto == 1:
                    print('ICMP Packet')
                    # Could parse ICMP here if desired

                # TCP
                elif proto == 6:
                    (src_port, dest_port, sequence, acknowledgement, flag_urg, flag_ack, 
                     flag_psh, flag_rst, flag_syn, flag_fin, data) = tcp_segment(data)
                    print('TCP Segment:')
                    print(f'  Source Port: {src_port}, Destination Port: {dest_port}')
                    print(f'  Sequence: {sequence}, Acknowledgement: {acknowledgement}')
                    print(f'  Flags:')
                    print(f'    URG: {flag_urg}, ACK: {flag_ack}, PSH: {flag_psh}, RST: {flag_rst}, SYN: {flag_syn}, FIN: {flag_fin}')
                    print('  Payload:')
                    print(format_multi_line('    ', data))

                # UDP
                elif proto == 17:
                    src_port, dest_port, size, data = udp_segment(data)
                    print('UDP Segment:')
                    print(f'  Source Port: {src_port}, Destination Port: {dest_port}, Length: {size}')
                    print('  Payload:')
                    print(format_multi_line('    ', data))
                else:
                    print('Other IPv4 Protocol')
                    print('Payload:')
                    print(format_multi_line('    ', data))
            else:
                print('Non IPv4 Ethernet Frame detected')
    except KeyboardInterrupt:
        print('\nExiting network sniffer...')

if __name__ == '__main__':
    main()
